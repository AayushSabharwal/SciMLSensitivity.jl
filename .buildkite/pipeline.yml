steps:
  - label: "{{matrix}}"
    matrix:
      - "Callbacks1"
      - "Callbacks2"
    env:
      GROUP: "{{matrix}}"
    plugins:
      - JuliaCI/julia#v1:
          version: "1"
      - JuliaCI/julia-test#v1:
          coverage: true
    agents:
      os: "linux"
      queue: "juliaecosystem"
      arch: "x86_64"
    timeout_in_minutes: 120
    # Don't run Buildkite if the commit message includes the text [skip tests]
    if: build.message !~ /\[skip tests\]/

  - label: "Shadowing"
    plugins:
      - JuliaCI/julia#v1:
          version: "1"
      - JuliaCI/julia-test#v1:
          coverage: true
          julia_args: "--threads=auto"
    agents:
      os: "linux"
      queue: "juliaecosystem"
      arch: "x86_64"
      exclusive: true
    env:
      GROUP: 'Shadowing'
    timeout_in_minutes: 120
    # Don't run Buildkite if the commit message includes the text [skip tests]
    if: build.message !~ /\[skip tests\]/

  - label: "Documentation"
    plugins:
      - JuliaCI/julia#v1:
          version: "1"
    command: |
      julia --project -e '
        println("--- :julia: Instantiating project")
        using Pkg
        Pkg.instantiate()
        Pkg.activate("docs")
        Pkg.instantiate()
        push!(LOAD_PATH, @__DIR__)
        println("+++ :julia: Building documentation")
        include("docs/make.jl")'
    agents:
      queue: "juliagpu"
      cuda: "*"
    env:
      DATADEPS_ALWAYS_ACCEPT: true
    if: build.message !~ /\[skip docs\]/ && !build.pull_request.draft
    timeout_in_minutes: 1000

  - label: "Julia 1"
    plugins:
      - JuliaCI/julia#v1:
          version: "1"
      - JuliaCI/julia-test#v1:
           coverage: false # 1000x slowdown
    agents:
      queue: "juliagpu"
      cuda: "*"
    env:
      GROUP: 'GPU'
    timeout_in_minutes: 60
    # Don't run Buildkite if the commit message includes the text [skip tests]
    if: build.message !~ /\[skip tests\]/

env:
  JULIA_PKG_SERVER: "" # it often struggles with our large artifacts
  SECRET_DOCUMENTER_KEY: "gY1VHLeyPtvVks8hT0Aq9+OZs7pEyN0X1x+yJg4rbVJ27Ks5DngTIu9WCKgENo1yJOMl1a9Sik+g2DSmocqIhkxnkx0R6KvGm/4eDKmS2fFbr3vNaSK2Ja5AXcB2wShpsc5I0tV1zc6Jvnqh4GB7dF1XqEdAg6Ga8LTINtAI64eItreG1AyevCLvMtbzUlTblQtFrj12n0bgdZbOtnS1/2devwk65V69jKiG+aupbN2jvIF3/Z1XA+hBmJKkWaEXf0Gj2UVxLMinMExxlDki79uJi5gQyit4t5E2DWd/+17Zr7B0hu7+Q70NgZqdHwQlPRQ+E7H+OZsxTZIVkjel5w==;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"
